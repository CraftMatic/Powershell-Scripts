<# You only need to run this block at the beginning to authenticate to Azure.

$subscriptionID = '<Subscription ID>'
$tenantDomain = '<tenant name>'
$environment = '<Azure Environment>'
 
 
$paramConnectAzAccount = @{
            subscriptionId = $subscriptionID
            Tenant       = $tenantDomain
            Environment  = $environment
            ErrorAction    = 'Stop'
        }
 
        $env:HTTPS_PROXY=""
        $env:NO_PROXY="*"
 
Connect-AzAccount @paramConnectAzAccount -UseDeviceAuthentication #>
#Style Points
Write-Host @"
 _____            __ _         ___  ___      _   _      _             
/  __ \          / _| |        |  \/  |     | | (_)    ( )            
| /  \/_ __ __ _| |_| |_ ______| .  . | __ _| |_ _  ___|/ ___         
| |   | '__/ _` |  _| __|______| |\/| |/ _` | __| |/ __| / __|        
| \__/\ | | (_| | | | |_       | |  | | (_| | |_| | (__  \__ \        
 \____/_|  \__,_|_|  \__|      \_|  |_/\__,_|\__|_|\___| |___/       
                                                                                                                                   
                                                                      
_____                                    ______      _               
| ___ \                                   | ___ \    | |              
| |_/ /___  ___  ___  _   _ _ __ ___ ___  | |_/ /___ | | ___          
|    // _ \/ __|/ _ \| | | | '__/ __/ _ \ |    // _ \| |/ _ \         
| |\ \  __/\__ \ (_) | |_| | | | (_|  __/ | |\ \ (_) | |  __/         
\_| \_\___||___/\___/ \__,_|_|  \___\___| \_| \_\___/|_|\___|         
                                                                      
                                                                      
  ___          _                                  _                   
 / _ \        (_)                                | |                  
/ /_\ \___ ___ _  __ _ _ __  _ __ ___   ___ _ __ | |_                 
|  _  / __/ __| |/ _` | '_ \| '_ ` _ \ / _ \ '_ \| __|                
| | | \__ \__ \ | (_| | | | | | | | | |  __/ | | | |_                 
\_| |_/___/___/_|\__, |_| |_|_| |_| |_|\___|_| |_|\__|                
                  __/ |                                               
                 |___/                                                
 _____           _     _                 _   _ _   _ _ _ _        
|  __ \         | |   | |               | | | | | (_) (_) |    
| |  \/_ __ __ _| |__ | |__   ___ _ __  | | | | |_ _| |_| |_ _   _
| | __| '__/ _` | '_ \| '_ \ / _ \ '__| | | | | __| | | | __| | | |   
| |_\ \ | | (_| | |_) | |_) |  __/ |    | |_| | |_| | | | |_| |_| |   
 \____/_|  \__,_|_.__/|_.__/ \___|_|     \___/ \__|_|_|_|\__|\__, |   
                                                              __/ |   
                                                             |___/  
---------------------------------------------------------------------
---------------------------------------------------------------------  
"@ -ForegroundColor Cyan
# Define the existing storage account
$resourceGroup = Read-host "Enter existing resource's resource group: "
$resourcename = Read-Host "Enter existing Resource name: "
$outputFile = "$env:USERPROFILE\Downloads\RoleAssignments_$resourcename.csv"

$resource = Get-AzResource | Where-Object { $_.Name -eq $resourceName }
if ($resource -eq $null) {
    Write-Output "Resource '$resourceName' not found. Please check the name and try again."
    exit
}

# Extract resource type safely
$resourceType = if ($resource.ResourceType) { 
    $resource.ResourceType 
} else { 
    ($resource.ResourceId -split "/")[-2] 
}

$resourceScope = $resource.ResourceId

# Get role assignments for the resource (including possible group-level assignments)
$roleAssignments = Get-AzRoleAssignment | Where-Object { $_.Scope -match $resourceScope -or $_.Scope -match $resource.ResourceGroupName }

# Initialize an array to store results
$data = @()

foreach ($assignment in $roleAssignments) {
    $assignedTo = $assignment.ObjectType
    $role = $assignment.RoleDefinitionName
    $groupName = $assignment.DisplayName

    # If it's a security group, retrieve members
    if ($assignedTo -eq "Group") {
        $groupMembers = Get-AzADGroupMember -GroupObjectId $assignment.ObjectId

        foreach ($member in $groupMembers) {
            $userDetails = Get-AzADUser -ObjectId $member.Id
            if ($userDetails) {
                $upnParts = $userDetails.UserPrincipalName -split "@"
                $newUPN = "$($upnParts[0])@<new UPN suffix>"
            }
            else {
                $newUPN = "Unknown"
            }
            
            $data += [PSCustomObject]@{
                ResourceName  = $resourceName
                ResourceType  = $resourceType
                SecurityGroup = $groupName
                Role          = $role
                UserUPN       = $newUPN
            }
        }
    }
    else {
        # If it's not a group, ensure UPN retrieval for individuals
        $userDetails = Get-AzADUser -ObjectId $assignment.ObjectId
        if ($userDetails) {
            $upnParts = $userDetails.UserPrincipalName -split "@"
            $newUPN = "$($upnParts[0])@<new UPN suffix"
        }
        else {
            $newUPN = "Unknown"
        }

        $data += [PSCustomObject]@{
            ResourceName  = $resourceName
            ResourceType  = $resourceType
            SecurityGroup = "N/A"
            Role          = $role
            UserUPN       = $newUPN
        }
    }
}

$data | Export-Csv -Path $outputFile -NoTypeInformation
Write-Output "Role assignments for '$resourceName' exported to $outputFile."
